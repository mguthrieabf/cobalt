#!/bin/bash

# Branch for a bugfix will be something like 1.2.3=fix_the_bugs
# The release branch associated with this will be release/1.2.3

BRANCH=`git branch --show-current`

RELEASE=`echo $BRANCH|cut -d= -f1`

echo ""
echo ""
echo "Congratulations on finishing a bug."
echo ""
echo "I will check your branch is clean and then merge your changes into"
echo "the release branch. I will then deploy to the UAT system."
echo "I will then delete the branch '$BRANCH'."
echo ""
echo "The release I will be updating is $RELEASE"
echo ""
read -p "Press key to continue..." -n1 -s

if [[ -z $(git status -s) ]]
then
  echo ""
  echo ""
  echo "Pulling latest release/$RELEASE branch..."
  echo ""

  git pull origin release/$RELEASE
  if [ $? -ne 0 ];then
   exit 1
  fi
  
  echo ""
  echo "Checking out release/$RELEASE branch..."
  echo ""

  git checkout release/$RELEASE
  if [ $? -ne 0 ];then
   exit 1
  fi

  echo ""
  echo "Merging $BRANCH into release/$RELEASE branch..."
  echo ""

  git merge $BRANCH
  if [ $? -ne 0 ];then
   exit 1
  fi

  echo ""
  echo "Pushing release/$RELEASE branch to github..."
  echo ""

  git push origin release/$RELEASE
  if [ $? -ne 0 ];then
   exit 1
  fi

  echo ""
  echo "Deploying to UAT server..."
  echo ""

  UATENV=`eb list | grep cobalt-uat` 
  UATNUM=`eb list | grep cobalt-uat | wc | awk '{print $1}'`

  if [ "$UATNUM" = "1" ]
  then
   echo "Deploying code to $UATENV..."
   eb deploy $UATENV
  else
   echo "Cannot deploy to UAT, found more than one UAT environment."
   echo $UATENV
  fi
  echo ""
  echo ""
else
  echo ""
  echo ""
  echo "Cannot comply with request."
  echo "You can probably fix this by running cgi_uat_fix_save."
  echo "There are uncommitted changes or other problems with your git status. See below."
  echo ""
  echo ""
  git status
  echo ""
  echo ""
  exit
fi

echo "Deleting branch $BRANCH..."
echo ""

git branch -d $BRANCH
